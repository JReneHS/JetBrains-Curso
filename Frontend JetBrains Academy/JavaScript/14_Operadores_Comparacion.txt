operadores de comparación



En JavaScript, es posible comparar diferentes tipos de datos. La ejecución de tales operaciones siempre devuelve el valor del tipo lógico: true o false.

La comparación puede ser uno de los temas más difíciles y confusos que encuentre en su camino hacia el dominio de JavaScript.


Lista de operadores de comparación

Hay varios operadores de comparación específicos en JS, pero probablemente conozca la mayoría de ellos por las matemáticas escolares:

    mayor que >, menor que <

    mayor o igual >=, menor o igual <=

    igual == y no igual != (en matemáticas está marcado por el símbolo ≠);

    estricto igual === y estricto no igual !==;

Tenga en cuenta que las marcas de igualdad doble y triple se utilizan para la comparación. Un solo signo de igualdad significaría una asignación.

Veamos cómo puede trabajar con operadores de comparación y diferentes tipos de datos.



Números

Las operaciones de comparación entre números son bastante intuitivas:

    console.log(5 > 3);   // true
    console.log(4 < 2);   // false
    console.log(7 == 6);  // false
    console.log(7 != 6);  // true

Es poco probable que le causen muchos problemas.

Strings

En Javascript, puede comparar no solo números, sino también otros tipos de datos. Por ejemplo, cadenas. Las cadenas se comparan con letras; el mayor es la cadena cuya letra se compara más adelante en la lista de caracteres Unicode :

    console.log("A" == "A");             // true
    console.log("A" != "Z");             // true
    console.log("Z" > "A");              // true
    console.log("colorful" > "color");   // true
    console.log("Dog" > "Bird");         // true

La comparación continuará hasta que termine una de las cadenas. Si ambas líneas terminan simultáneamente, son iguales. De lo contrario, una cadena más larga se considera mayor.

El orden en el que se alinean los caracteres en la tabla Unicode es muy similar al alfabético, pero con una ligera diferencia: las letras minúsculas en Unicode serán más grandes que las mayúsculas. Por ejemplo, es cierto que "z" > "Z".



Diferentes tipos

Cuando necesita comparar diferentes tipos de datos con un número, JavaScript reduce cada uno de ellos a un número:

    console.log("10" > 5);    // true
    console.log(14 == "14");  // true

El valor lógico true en tales casos se convierte 1 y false se considera 0.

    console.log(true == 1);   // true
    console.log(false == 0);  // true



Estricto igual y estricto no igual

Al final, deberíamos considerar estricto igual === y estricto no igual !==. Se diferencian de los operadores comunes iguales == y no iguales != en que comparan no solo valores sino también tipos de datos:

    console.log("15" === 15);         // false
    console.log("15" == 15);          // true 
    console.log(true === 1);          // false
    console.log(true == 1);           // true
    console.log(null === undefined);  // false
    console.log(null == undefined);   // true 




nulo e indefinido

En todos los algoritmos considerados del trabajo de los operadores, existen varias excepciones. Por ejemplo, null se comporta de manera extraña en términos matemáticos en comparación con 0:

    console.log(null > 0);  // false
    console.log(null == 0); // false
    console.log(null >= 0); // true
    console.log(null <= 0); // true


Además, cualquier comparación de undefined con 0 es siempre false:

console.log(undefined > 0);  // false
console.log(undefined < 0);  // false
console.log(undefined <= 0); // false

JS tiene otra regla extraña: undefined solo se puede igualar null y nada más:

    console.log(undefined == null);  // true 
    console.log(undefined == 0);     // false

Ahora ya sabe cómo funcionan los operadores de comparación. Trate de tener cuidado con todas las operaciones de comparación donde haya null o undefined, para que no aparezcan errores en sus scripts.

