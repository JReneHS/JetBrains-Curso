modificadores de acceso

¿Por qué la palabra "público" está ahí? Como probablemente pueda adivinar, significa que el main(...)método está disponible para todos. La palabra publicaquí es un modificador de acceso.

El modificador de acceso es una palabra clave especial que especifica quién puede usar su código o una parte especial del mismo. Puede colocarse delante de cualquier campo, método o clase completa.

Entonces, ¡ya conoce al menos uno de los modificadores de acceso! Los otros son: package-private, protected y private. ¿Por qué los necesitamos? Vamos a averiguar.



¿por qué debería usarlos?
Hay dos razones principales para tener el acceso bajo control: claridad y seguridad del código.

Claridad del código. Imagina que tu código es el complicado motor de una lavadora. Hay algunas funciones disponibles, por ejemplo, elegir un programa de lavado o iniciar un proceso de lavado.

¿Qué podemos hacer para ayudar al usuario a descubrir rápidamente cómo lavar su ropa? Podemos tapar el motor con la carrocería y añadir unos botones para elegir un modo de lavado e iniciar el proceso. El usuario no necesita saber qué sucede dentro del cuerpo de la máquina; los botones para conseguir el resultado son más que suficientes.

Así es como el control de acceso ayuda en el código: puede "ocultar" el motor del usuario restringiendo el acceso y simplemente proporcionándoles los "botones" públicos.

Código de seguridad. Ahora imagine que ha desarrollado una biblioteca bastante útil que utilizan otros desarrolladores. Un día, John Doe quiere usar la funcionalidad de su código en su proyecto, pero el problema es que necesita cambiar una variable en una de sus clases. Si es público, nada puede evitar que haga eso en su código antes de usar el método A de la biblioteca.

¿Qué puede suceder si la variable se usa en algún lugar del método B? Probablemente el método B comenzaría a actuar de manera impredecible. Por lo tanto, proteger partes importantes de su código es una garantía de que se utilizará como una parte no modificable y su comportamiento será el exacto que ha desarrollado para él.



Clases públicas y paquetes privados
De hecho, cuando administra el acceso en su código, simplemente divide los objetos de su programa en dos grupos principales: elementos de nivel superior y elementos de nivel inferior. Los campos y métodos que se utilizan explícitamente fuera de la clase se denominan campos y métodos de nivel superior. Si los campos y métodos se utilizan dentro de la clase, se conocen como de bajo nivel. Esta lógica de bajo y alto nivel también es aplicable a las clases.
Por lo general, el uso de elementos de bajo nivel ayuda a descargar clases, métodos o campos de nivel superior para estructurar y descomponer el código. Si estos elementos no se utilizan explícitamente, será eficaz restringir el acceso a ellos.

Ahora veamos cómo podemos establecer restricciones a diferentes partes del código. Una clase de nivel superior (ni una interna ni una anidada) puede tener uno de los dos modificadores siguientes:

    package-private (predeterminado, sin modificador explícito): visible solo para clases del mismo paquete;

    público: visible para todas las clases en todas partes.


La forma común de usar modificadores de clase de nivel superior es:

    hacer públicas las clases, que contienen métodos exactos para los usuarios (los “botones”) ;
    Haga que todas las demás clases con métodos lógicos de bajo nivel, utilizados por los públicos, sean package-private (cubra el motor con el cuerpo).

Los métodos getter y setter se utilizan para proteger y ocultar sus datos al crear clases. Un método getter devuelve el valor de un campo mientras que un método setter establece o actualiza el valor. Discutiremos las características principales de los métodos getter y setter más adelante en el tema relacionado con estos términos.

Recuerde: todo lo que no esté destinado a ser usado / cambiado por clases de otros paquetes, no debe ser público.



Miembros privados
Un miembro de la clase (un campo o un método, por ejemplo, un constructor de clases) tiene más opciones para elegir: privado , paquete-privado , protegido y público . Como puede ver, aquí hay dos modificadores adicionales. Consideremos los modificadores de miembros con más detalle.

Los campos a menudo se declaran privados para controlar el acceso a ellos desde cualquier otra clase. En algunos casos, estos campos solo se usan internamente en la clase y no hay forma de cambiarlos e incluso acceder a ellos desde ninguna otra clase. En otros casos, se puede hacer a través de métodos de acceso (por ejemplo, captadores y definidores).

Los métodos privados se utilizan para ocultar la implementación lógica interna de bajo nivel del resto del código y hacer que los métodos públicos sean más breves y legibles.

A veces, se requiere un constructor de clase privada. Este tipo de constructor solo se puede utilizar dentro de la clase, por ejemplo, desde otro constructor, que también puede ser público o privado, o desde los métodos de la clase.




Miembros privados del paquete
Un modificador de acceso de paquete privado no requiere ninguna palabra clave. Si un campo, un método o un constructor tiene este modificador, entonces se puede leer o cambiar desde cualquier clase dentro del mismo paquete.




Miembros públicos y protegidos
Descargo de responsabilidad: ¡estos dos modificadores aprenderá a usarlos más adelante!

Si un miembro de la clase tiene el modificador de acceso protegido , se puede acceder a él desde las clases dentro del mismo paquete y todas las subclases de esta clase (incluidas las de otros paquetes). Por ahora, es importante recordar que la opción protegida es menos restrictiva que package-private, ya que permite que algunas clases de otros paquetes accedan al miembro del código.

El modificador de acceso público significa que no hay restricciones sobre el uso de campos, métodos o clases. A menudo se usa para constructores, métodos que representan la clase API pero no se usan comúnmente con campos.

A continuación, se muestran formas comunes de comprender qué modificador de acceso elegir. No es el algoritmo definitivo, porque los temas de herencia y subclases aún no se han cubierto, pero puede ayudarlo a comprender los principales casos de uso de los modificadores.




Resumen
Entonces, revisemos los nombres de los modificadores de acceso (de mayor a menor limitación):

    privado : disponible solo dentro de una clase;
    package-private (también conocido como predeterminado , implícito): disponible para todas las clases en el mismo paquete;
    protegido : disponible para clases en el mismo paquete y para subclases (se tratará más adelante);
    público : disponible para todas las clases en todas partes.


La tabla ilustra el nivel de acceso proporcionado por los modificadores de acceso: la clase siempre tiene acceso a sus miembros y así sucesivamente. Tenga en cuenta que por subclase aquí nos referimos solo a una subclase de esta clase utilizada en otro paquete. Aprenderemos herencia y subclases más adelante.

Recuerde que solo se pueden usar modificadores públicos o predeterminados (sin palabras clave) al declarar clases. Los cuatro se pueden aplicar a los miembros de la clase: campos, métodos, etc.
Como conclusión, hay un pequeño consejo:

use el nivel de acceso más restrictivo que tenga sentido para un miembro en particular. No haga públicos a todos los miembros.