algoritmo de Rabin-Karp

Para un patrón P y un texto t, el algoritmo de búsqueda de subcadenas más simple realiza una comparación símbolo por símbolo del patrón con cada subcadena del texto, lo que da como resultado O( ∣p∣ ⋅ ∣t∣ ) tiempo de ejecución. Si trabaja con textos grandes y el rendimiento es fundamental, puede que sea demasiado lento. Para encontrar una subcadena más rápido, necesitamos usar enfoques más eficientes que la comparación directa ingenua.

Uno de los algoritmos que ayuda a buscar una subcadena más rápido es el algoritmo Rabin-Karp . Utiliza hash de cadena para una comparación más rápida, lo que reduce significativamente el tiempo de ejecución total en comparación con el enfoque ingenuo.


Descripción del algoritmo

La idea principal del algoritmo Rabin-Karp es utilizar hash de cadenas y comparar los valores hash de las cadenas en lugar de una comparación directa. Para calcular rápidamente los valores hash de las subcadenas, el algoritmo utiliza las funciones hash polinomiales y su propiedad hash rodante. Con más detalle, el algoritmo se puede formular de la siguiente manera:

    1) Calcula el valor hash de un patrón.

    2) Moviéndose a lo largo del texto (de derecha a izquierda), calcule el valor hash para la subcadena actual del texto usando la propiedad hash rodante.
    
    3) Si los valores hash para el patrón y la subcadena actual no son iguales, pase a la siguiente subcadena. De lo contrario, realice una comparación símbolo por símbolo de las cadenas. Si las cadenas son iguales, agregue el índice actual a una lista de ocurrencias.

    4) Repita los pasos 2-3 hasta que se procesen todas las subcadenas del texto. Luego, devuelve una lista de todas las ocurrencias.


Un ejemplo

Considere cómo funciona el algoritmo para un patrón ACDC y un texto BACDCCBA. Para simplificar, usaremos las siguientes constantes para la función hash polinomial: a = 3 y m = 11. Primero, necesitamos calcular el hash para el patrón:

    h_P(ACDC) = ( 1 ⋅ 3^0 + 3 ⋅ 3^1 + 4 ⋅ 3^2 + 3 ⋅ 3^3 ) mod 11 = 127 mod 11 = 6.

El siguiente paso es calcular el valor hash para el primer sufijo del texto:

    h_P(CCBA) = (3 ⋅ 3^0 + 3 ⋅ 3^1 + 2 ⋅ 3^2 + 1 ⋅ 3^3 ) mod 11 = 57 mod 11 = 2

Ya que h_P(CCBA) != h_P(ACDC), sabemos que las cadenas tampoco son iguales. El siguiente paso es calcular el valor hash para la siguiente subcadena del texto. Usando la propiedad hash rodante, puede hacerlo de la siguiente manera:

    h_P(DCCB) = ( (h_P(CCBA) - 1 ⋅ 3^3 ) ⋅ 3 + 4 ) mod 11 = ( (2 - 27) ⋅ 3 + 4 ) mod 11 = 6.

Los valores hash del patrón y la subcadena actual son iguales, por lo que debemos verificar que las cadenas sean iguales. Ya que DCCB != ACDC, el intento no tiene éxito, así que pasamos a la siguiente subcadena:

    h_P(CDCC) = ( (h_P(DCCB) - 2 ⋅ 3^3 ) ⋅ 3 + 3 ) mod 11 = ( (6 - 54) ⋅  3 + 3 ) mod 11 = 2.
    
Podemos ver que este valor hash no es igual al valor hash del patrón, por lo que las cadenas no son iguales. La siguiente subcadena a considerar es ACDC:

    h_P(ACDC) = ( (h_P(CDCC) - 3 ⋅ 3^3 ) ⋅ 3 + 1 ) mod 11 = ( (2 - 81) ⋅ 3 + 1 ) mod 11 = 6.
    
Los valores hash y la subcadena coinciden, por lo que hemos encontrado una ocurrencia. La última subcadena a procesar es BACD:

    h_P(BACD) = ( (h_P(ACDC) - 3 ⋅ 3^3 ) ⋅ 3 + 2 ) mod 11 = ( (6 - 81) ⋅ 3 + 2 ) mod 11 = 8.
    
Ya que h_P(BACD) != h_P(ACDC), las cadenas no son iguales. Se procesan todas las subcadenas del texto y se finaliza el algoritmo.


Análisis de complejidad

Estimemos el tiempo de ejecución del algoritmo para un patrón P y un texto t ( asumiendo que ∣t∣ ≥ ∣p∣ ).

El primer paso del algoritmo es calcular el valor hash para el patrón y luego para el primer sufijo del texto. Esto requiere 2 ⋅ ∣p∣ operaciones. Después de eso, calculamos el valor hash para el resto ∣t∣ - ∣p∣ subcadenas del texto utilizando la propiedad hash rodante. Cada uno de estos cálculos se puede realizar en O(1). Cuando los valores hash del patrón y la subcadena actual son iguales, realizamos una comparación símbolo por símbolo que requiere ∣p∣ operaciones en el peor de los casos. Por lo tanto, el tiempo de ejecución total del algoritmo se puede estimar como

    2 ⋅ ∣p∣ + ( ∣t∣ - ∣p∣ + occ ⋅ ∣p∣ )= O( ∣t∣ + occ ⋅ ∣p∣ ),

dónde occ es el número de veces que aparece el patrón en el texto.

Tenga en cuenta que en algunos casos, el algoritmo puede funcionar en O( ∣t∣ ⋅ ∣p∣ ). Por ejemplo, para p = AAA y t = AAAAAAAA, el algoritmo realizará una comparación símbolo por símbolo del patrón con cada subcadena del texto, lo que da como resultado el peor tiempo de ejecución.

Además, puede suceder la misma situación si hay muchas colisiones entre el patrón y las subcadenas del texto. Sin embargo, para la función hash polinomial, la probabilidad de colisión es approx ≈ 1/m, que es bajo para una gran m.

En resumen, aunque en algunos casos el algoritmo de Rabin-Karp puede funcionar en O( ∣t∣ ⋅ ∣p∣ ), en realidad, estos casos son bastante raros, lo que hace que este algoritmo sea una alternativa muy buena y eficiente al enfoque de búsqueda de subcadenas ingenuo.